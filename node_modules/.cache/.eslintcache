[{"C:\\A new folder\\codes\\weatherapp\\src\\index.js":"1","C:\\A new folder\\codes\\weatherapp\\src\\App.js":"2","C:\\A new folder\\codes\\weatherapp\\src\\components\\TopButtons.jsx":"3","C:\\A new folder\\codes\\weatherapp\\src\\components\\Inputs.jsx":"4","C:\\A new folder\\codes\\weatherapp\\src\\components\\TimeAndLocation.jsx":"5","C:\\A new folder\\codes\\weatherapp\\src\\components\\TemparatureAndDetails.jsx":"6","C:\\A new folder\\codes\\weatherapp\\src\\components\\Forecast.jsx":"7","C:\\A new folder\\codes\\weatherapp\\src\\services\\weatherService.js":"8"},{"size":211,"mtime":1680814079159,"results":"9","hashOfConfig":"10"},{"size":1955,"mtime":1680989995224,"results":"11","hashOfConfig":"10"},{"size":768,"mtime":1680986447117,"results":"12","hashOfConfig":"10"},{"size":2349,"mtime":1680986979514,"results":"13","hashOfConfig":"10"},{"size":647,"mtime":1680983681026,"results":"14","hashOfConfig":"10"},{"size":2839,"mtime":1680985096819,"results":"15","hashOfConfig":"10"},{"size":977,"mtime":1680989987037,"results":"16","hashOfConfig":"10"},{"size":2486,"mtime":1680989524493,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"14f1lu8",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\A new folder\\codes\\weatherapp\\src\\index.js",[],[],[],"C:\\A new folder\\codes\\weatherapp\\src\\App.js",["44"],[],"import './App.css';\nimport UilReact from '@iconscout/react-unicons/icons/uil-react'\nimport TopButtons from './components/TopButtons';\nimport Inputs from './components/Inputs';\nimport TimeAndLocation from './components/TimeAndLocation';\nimport TemparatureAndDetails from './components/TemparatureAndDetails';\nimport Forecast from './components/Forecast';\nimport getFormattedWeatherData from './services/weatherService';\nimport { useEffect ,useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n\nconst [query,setQuery]=useState({q:\"berlin\"})\nconst [units,setUnits]=useState(\"metric\")\nconst [weather,setWeather]=useState(null)\n\nuseEffect(()=>{\n  const fetchWeather= async()=>{\n    const message=query.q? query.q : \"current location\"\n    toast.info(\"Fetching data for \"+message)\n    await getFormattedWeatherData({ ...query,units}).then(\n      (data)=>{\n        toast.success(`Successfully fetched weather for ${data.name} ${data.country}`)\n        setWeather(data)\n    })\n  }\n  fetchWeather()\n},[query,units])\n\nconst formatBackground=()=>{\n  if(!weather) return 'from-cyan-700 to-blue-700'\n  const threshold=units==='metric'?20:80\n  return (weather.temp<=threshold) ? 'from-cyan-700 to-blue-700' : 'from-yellow-700 to-orange-700'\n}\n\n\n  return (\n    <div className={`mx-auto max-w-screen-md mt-4 py-5 px-32 bg-gradient-to-br ${formatBackground()} h-fit shadow-xl shadow-gray-400`}>\n      <TopButtons setQuery={setQuery}/>\n      <Inputs setQuery={setQuery} units={units} setUnits={setUnits}/>\n      {weather && <div>\n      <TimeAndLocation weather={weather}/>\n      <TemparatureAndDetails weather={weather}/>\n\n      <Forecast title=\"Hourly forecast\" items={weather.hourly}/>\n      <Forecast title=\"Daily forecast\" items={weather.daily}/></div>}\n      <ToastContainer autoClose={2000} theme='colored' newestOnTop={true}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","C:\\A new folder\\codes\\weatherapp\\src\\components\\TopButtons.jsx",[],[],"C:\\A new folder\\codes\\weatherapp\\src\\components\\Inputs.jsx",[],[],"C:\\A new folder\\codes\\weatherapp\\src\\components\\TimeAndLocation.jsx",[],[],"C:\\A new folder\\codes\\weatherapp\\src\\components\\TemparatureAndDetails.jsx",[],[],"C:\\A new folder\\codes\\weatherapp\\src\\components\\Forecast.jsx",[],[],"C:\\A new folder\\codes\\weatherapp\\src\\services\\weatherService.js",[],[],{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":16},"no-unused-vars","'UilReact' is defined but never used.","Identifier","unusedVar"]