{"ast":null,"code":"import _classCallCheck from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { formatOffset as _formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nvar singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nvar SystemZone = /*#__PURE__*/function (_Zone) {\n  _inherits(SystemZone, _Zone);\n  var _super = _createSuper(SystemZone);\n  function SystemZone() {\n    _classCallCheck(this, SystemZone);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SystemZone, [{\n    key: \"type\",\n    get: /** @override **/\n    function get() {\n      return \"system\";\n    }\n\n    /** @override **/\n  }, {\n    key: \"name\",\n    get: function get() {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    }\n\n    /** @override **/\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      return false;\n    }\n\n    /** @override **/\n  }, {\n    key: \"offsetName\",\n    value: function offsetName(ts, _ref) {\n      var format = _ref.format,\n        locale = _ref.locale;\n      return parseZoneInfo(ts, format, locale);\n    }\n\n    /** @override **/\n  }, {\n    key: \"formatOffset\",\n    value: function formatOffset(ts, format) {\n      return _formatOffset(this.offset(ts), format);\n    }\n\n    /** @override **/\n  }, {\n    key: \"offset\",\n    value: function offset(ts) {\n      return -new Date(ts).getTimezoneOffset();\n    }\n\n    /** @override **/\n  }, {\n    key: \"equals\",\n    value: function equals(otherZone) {\n      return otherZone.type === \"system\";\n    }\n\n    /** @override **/\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }], [{\n    key: \"instance\",\n    get:\n    /**\n     * Get a singleton instance of the local zone\n     * @return {SystemZone}\n     */\n    function get() {\n      if (singleton === null) {\n        singleton = new SystemZone();\n      }\n      return singleton;\n    }\n  }]);\n  return SystemZone;\n}(Zone);\nexport { SystemZone as default };","map":{"version":3,"names":["formatOffset","parseZoneInfo","Zone","singleton","SystemZone","_Zone","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","Intl","DateTimeFormat","resolvedOptions","timeZone","value","offsetName","ts","_ref","format","locale","offset","Date","getTimezoneOffset","equals","otherZone","type","default"],"sources":["C:/A new folder/codes/weatherapp/node_modules/luxon/src/zones/systemZone.js"],"sourcesContent":["import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n"],"mappings":";;;;AAAA,SAASA,YAAY,IAAZA,aAAY,EAAEC,aAAa,QAAQ,iBAAiB;AAC7D,OAAOC,IAAI,MAAM,YAAY;AAE7B,IAAIC,SAAS,GAAG,IAAI;;AAEpB;AACA;AACA;AACA;AAHA,IAIqBC,UAAU,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EAAA,SAAAA,WAAA;IAAAK,eAAA,OAAAL,UAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,UAAA;IAAAS,GAAA;IAAAC,GAAA,EAY7B;IACA,SAAAA,IAAA,EAAW;MACT,OAAO,QAAQ;IACjB;;IAEA;EAAA;IAAAD,GAAA;IAAAC,GAAA,EACA,SAAAA,IAAA,EAAW;MACT,OAAO,IAAIC,IAAI,CAACC,cAAc,EAAE,CAACC,eAAe,EAAE,CAACC,QAAQ;IAC7D;;IAEA;EAAA;IAAAL,GAAA;IAAAC,GAAA,EACA,SAAAA,IAAA,EAAkB;MAChB,OAAO,KAAK;IACd;;IAEA;EAAA;IAAAD,GAAA;IAAAM,KAAA,EACA,SAAAC,WAAWC,EAAE,EAAAC,IAAA,EAAsB;MAAA,IAAlBC,MAAM,GAAAD,IAAA,CAANC,MAAM;QAAEC,MAAM,GAAAF,IAAA,CAANE,MAAM;MAC7B,OAAOvB,aAAa,CAACoB,EAAE,EAAEE,MAAM,EAAEC,MAAM,CAAC;IAC1C;;IAEA;EAAA;IAAAX,GAAA;IAAAM,KAAA,EACA,SAAAnB,aAAaqB,EAAE,EAAEE,MAAM,EAAE;MACvB,OAAOvB,aAAY,CAAC,IAAI,CAACyB,MAAM,CAACJ,EAAE,CAAC,EAAEE,MAAM,CAAC;IAC9C;;IAEA;EAAA;IAAAV,GAAA;IAAAM,KAAA,EACA,SAAAM,OAAOJ,EAAE,EAAE;MACT,OAAO,CAAC,IAAIK,IAAI,CAACL,EAAE,CAAC,CAACM,iBAAiB,EAAE;IAC1C;;IAEA;EAAA;IAAAd,GAAA;IAAAM,KAAA,EACA,SAAAS,OAAOC,SAAS,EAAE;MAChB,OAAOA,SAAS,CAACC,IAAI,KAAK,QAAQ;IACpC;;IAEA;EAAA;IAAAjB,GAAA;IAAAC,GAAA,EACA,SAAAA,IAAA,EAAc;MACZ,OAAO,IAAI;IACb;EAAC;IAAAD,GAAA;IAAAC,GAAA;IAjDD;AACF;AACA;AACA;IACE,SAAAA,IAAA,EAAsB;MACpB,IAAIX,SAAS,KAAK,IAAI,EAAE;QACtBA,SAAS,GAAG,IAAIC,UAAU,EAAE;MAC9B;MACA,OAAOD,SAAS;IAClB;EAAC;EAAA,OAAAC,UAAA;AAAA,EAVqCF,IAAI;AAAA,SAAvBE,UAAU,IAAA2B,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}