{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/A new folder/codes/weatherapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\nvar INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", \"The end of an interval must be after its start, but you had start=\".concat(start.toISO(), \" and end=\").concat(end.toISO()));\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nvar Interval = /*#__PURE__*/function () {\n  /**\n   * @private\n   */\n  function Interval(config) {\n    _classCallCheck(this, Interval);\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  _createClass(Interval, [{\n    key: \"start\",\n    get:\n    /**\n     * Returns the start of the Interval\n     * @type {DateTime}\n     */\n    function get() {\n      return this.isValid ? this.s : null;\n    }\n\n    /**\n     * Returns the end of the Interval\n     * @type {DateTime}\n     */\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.isValid ? this.e : null;\n    }\n\n    /**\n     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n     * @type {boolean}\n     */\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this.invalidReason === null;\n    }\n\n    /**\n     * Returns an error code if this Interval is invalid, or null if the Interval is valid\n     * @type {string}\n     */\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.invalid ? this.invalid.reason : null;\n    }\n\n    /**\n     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n     * @type {string}\n     */\n  }, {\n    key: \"invalidExplanation\",\n    get: function get() {\n      return this.invalid ? this.invalid.explanation : null;\n    }\n\n    /**\n     * Returns the length of the Interval in the specified unit.\n     * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n     * @return {number}\n     */\n  }, {\n    key: \"length\",\n    value: function length() {\n      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"milliseconds\";\n      return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;\n    }\n\n    /**\n     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n     * @param {string} [unit='milliseconds'] - the unit of time to count.\n     * @return {number}\n     */\n  }, {\n    key: \"count\",\n    value: function count() {\n      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"milliseconds\";\n      if (!this.isValid) return NaN;\n      var start = this.start.startOf(unit),\n        end = this.end.startOf(unit);\n      return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n    }\n\n    /**\n     * Returns whether this Interval's start and end are both in the same unit of time\n     * @param {string} unit - the unit of time to check sameness on\n     * @return {boolean}\n     */\n  }, {\n    key: \"hasSame\",\n    value: function hasSame(unit) {\n      return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n    }\n\n    /**\n     * Return whether this Interval has the same start and end DateTimes.\n     * @return {boolean}\n     */\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.s.valueOf() === this.e.valueOf();\n    }\n\n    /**\n     * Return whether this Interval's start is after the specified DateTime.\n     * @param {DateTime} dateTime\n     * @return {boolean}\n     */\n  }, {\n    key: \"isAfter\",\n    value: function isAfter(dateTime) {\n      if (!this.isValid) return false;\n      return this.s > dateTime;\n    }\n\n    /**\n     * Return whether this Interval's end is before the specified DateTime.\n     * @param {DateTime} dateTime\n     * @return {boolean}\n     */\n  }, {\n    key: \"isBefore\",\n    value: function isBefore(dateTime) {\n      if (!this.isValid) return false;\n      return this.e <= dateTime;\n    }\n\n    /**\n     * Return whether this Interval contains the specified DateTime.\n     * @param {DateTime} dateTime\n     * @return {boolean}\n     */\n  }, {\n    key: \"contains\",\n    value: function contains(dateTime) {\n      if (!this.isValid) return false;\n      return this.s <= dateTime && this.e > dateTime;\n    }\n\n    /**\n     * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n     * @param {Object} values - the values to set\n     * @param {DateTime} values.start - the starting DateTime\n     * @param {DateTime} values.end - the ending DateTime\n     * @return {Interval}\n     */\n  }, {\n    key: \"set\",\n    value: function set() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        start = _ref.start,\n        end = _ref.end;\n      if (!this.isValid) return this;\n      return Interval.fromDateTimes(start || this.s, end || this.e);\n    }\n\n    /**\n     * Split this Interval at each of the specified DateTimes\n     * @param {...DateTime} dateTimes - the unit of time to count.\n     * @return {Array}\n     */\n  }, {\n    key: \"splitAt\",\n    value: function splitAt() {\n      var _this = this;\n      if (!this.isValid) return [];\n      for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {\n        dateTimes[_key] = arguments[_key];\n      }\n      var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {\n          return _this.contains(d);\n        }).sort(),\n        results = [];\n      var s = this.s,\n        i = 0;\n      while (s < this.e) {\n        var added = sorted[i] || this.e,\n          next = +added > +this.e ? this.e : added;\n        results.push(Interval.fromDateTimes(s, next));\n        s = next;\n        i += 1;\n      }\n      return results;\n    }\n\n    /**\n     * Split this Interval into smaller Intervals, each of the specified length.\n     * Left over time is grouped into a smaller interval\n     * @param {Duration|Object|number} duration - The length of each resulting interval.\n     * @return {Array}\n     */\n  }, {\n    key: \"splitBy\",\n    value: function splitBy(duration) {\n      var dur = Duration.fromDurationLike(duration);\n      if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n        return [];\n      }\n      var s = this.s,\n        idx = 1,\n        next;\n      var results = [];\n      while (s < this.e) {\n        var added = this.start.plus(dur.mapUnits(function (x) {\n          return x * idx;\n        }));\n        next = +added > +this.e ? this.e : added;\n        results.push(Interval.fromDateTimes(s, next));\n        s = next;\n        idx += 1;\n      }\n      return results;\n    }\n\n    /**\n     * Split this Interval into the specified number of smaller intervals.\n     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n     * @return {Array}\n     */\n  }, {\n    key: \"divideEqually\",\n    value: function divideEqually(numberOfParts) {\n      if (!this.isValid) return [];\n      return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n    }\n\n    /**\n     * Return whether this Interval overlaps with the specified Interval\n     * @param {Interval} other\n     * @return {boolean}\n     */\n  }, {\n    key: \"overlaps\",\n    value: function overlaps(other) {\n      return this.e > other.s && this.s < other.e;\n    }\n\n    /**\n     * Return whether this Interval's end is adjacent to the specified Interval's start.\n     * @param {Interval} other\n     * @return {boolean}\n     */\n  }, {\n    key: \"abutsStart\",\n    value: function abutsStart(other) {\n      if (!this.isValid) return false;\n      return +this.e === +other.s;\n    }\n\n    /**\n     * Return whether this Interval's start is adjacent to the specified Interval's end.\n     * @param {Interval} other\n     * @return {boolean}\n     */\n  }, {\n    key: \"abutsEnd\",\n    value: function abutsEnd(other) {\n      if (!this.isValid) return false;\n      return +other.e === +this.s;\n    }\n\n    /**\n     * Return whether this Interval engulfs the start and end of the specified Interval.\n     * @param {Interval} other\n     * @return {boolean}\n     */\n  }, {\n    key: \"engulfs\",\n    value: function engulfs(other) {\n      if (!this.isValid) return false;\n      return this.s <= other.s && this.e >= other.e;\n    }\n\n    /**\n     * Return whether this Interval has the same start and end as the specified Interval.\n     * @param {Interval} other\n     * @return {boolean}\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!this.isValid || !other.isValid) {\n        return false;\n      }\n      return this.s.equals(other.s) && this.e.equals(other.e);\n    }\n\n    /**\n     * Return an Interval representing the intersection of this Interval and the specified Interval.\n     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n     * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n     * @param {Interval} other\n     * @return {Interval}\n     */\n  }, {\n    key: \"intersection\",\n    value: function intersection(other) {\n      if (!this.isValid) return this;\n      var s = this.s > other.s ? this.s : other.s,\n        e = this.e < other.e ? this.e : other.e;\n      if (s >= e) {\n        return null;\n      } else {\n        return Interval.fromDateTimes(s, e);\n      }\n    }\n\n    /**\n     * Return an Interval representing the union of this Interval and the specified Interval.\n     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n     * @param {Interval} other\n     * @return {Interval}\n     */\n  }, {\n    key: \"union\",\n    value: function union(other) {\n      if (!this.isValid) return this;\n      var s = this.s < other.s ? this.s : other.s,\n        e = this.e > other.e ? this.e : other.e;\n      return Interval.fromDateTimes(s, e);\n    }\n\n    /**\n     * Merge an array of Intervals into a equivalent minimal set of Intervals.\n     * Combines overlapping and adjacent Intervals.\n     * @param {Array} intervals\n     * @return {Array}\n     */\n  }, {\n    key: \"difference\",\n    value:\n    /**\n     * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n     * @param {...Interval} intervals\n     * @return {Array}\n     */\n    function difference() {\n      var _this2 = this;\n      for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        intervals[_key2] = arguments[_key2];\n      }\n      return Interval.xor([this].concat(intervals)).map(function (i) {\n        return _this2.intersection(i);\n      }).filter(function (i) {\n        return i && !i.isEmpty();\n      });\n    }\n\n    /**\n     * Returns a string representation of this Interval appropriate for debugging.\n     * @return {string}\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (!this.isValid) return INVALID;\n      return \"[\".concat(this.s.toISO(), \" \\u2013 \").concat(this.e.toISO(), \")\");\n    }\n\n    /**\n     * Returns a localized string representing this Interval. Accepts the same options as the\n     * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n     * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n     * is browser-specific, but in general it will return an appropriate representation of the\n     * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n     * specified.\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n     * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n     * Intl.DateTimeFormat constructor options.\n     * @param {Object} opts - Options to override the configuration of the start DateTime.\n     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n     * @return {string}\n     */\n  }, {\n    key: \"toLocaleString\",\n    value: function toLocaleString() {\n      var formatOpts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Formats.DATE_SHORT;\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID;\n    }\n\n    /**\n     * Returns an ISO 8601-compliant string representation of this Interval.\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     * @param {Object} opts - The same options as {@link DateTime#toISO}\n     * @return {string}\n     */\n  }, {\n    key: \"toISO\",\n    value: function toISO(opts) {\n      if (!this.isValid) return INVALID;\n      return \"\".concat(this.s.toISO(opts), \"/\").concat(this.e.toISO(opts));\n    }\n\n    /**\n     * Returns an ISO 8601-compliant string representation of date of this Interval.\n     * The time components are ignored.\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     * @return {string}\n     */\n  }, {\n    key: \"toISODate\",\n    value: function toISODate() {\n      if (!this.isValid) return INVALID;\n      return \"\".concat(this.s.toISODate(), \"/\").concat(this.e.toISODate());\n    }\n\n    /**\n     * Returns an ISO 8601-compliant string representation of time of this Interval.\n     * The date components are ignored.\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     * @param {Object} opts - The same options as {@link DateTime#toISO}\n     * @return {string}\n     */\n  }, {\n    key: \"toISOTime\",\n    value: function toISOTime(opts) {\n      if (!this.isValid) return INVALID;\n      return \"\".concat(this.s.toISOTime(opts), \"/\").concat(this.e.toISOTime(opts));\n    }\n\n    /**\n     * Returns a string representation of this Interval formatted according to the specified format\n     * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n     * formatting tool.\n     * @param {string} dateFormat - The format string. This string formats the start and end time.\n     * See {@link DateTime#toFormat} for details.\n     * @param {Object} opts - Options.\n     * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n     * representations.\n     * @return {string}\n     */\n  }, {\n    key: \"toFormat\",\n    value: function toFormat(dateFormat) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$separator = _ref2.separator,\n        separator = _ref2$separator === void 0 ? \" – \" : _ref2$separator;\n      if (!this.isValid) return INVALID;\n      return \"\".concat(this.s.toFormat(dateFormat)).concat(separator).concat(this.e.toFormat(dateFormat));\n    }\n\n    /**\n     * Return a Duration representing the time spanned by this interval.\n     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n     * @param {Object} opts - options that affect the creation of the Duration\n     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n     * @return {Duration}\n     */\n  }, {\n    key: \"toDuration\",\n    value: function toDuration(unit, opts) {\n      if (!this.isValid) {\n        return Duration.invalid(this.invalidReason);\n      }\n      return this.e.diff(this.s, unit, opts);\n    }\n\n    /**\n     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n     * @param {function} mapFn\n     * @return {Interval}\n     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n     */\n  }, {\n    key: \"mapEndpoints\",\n    value: function mapEndpoints(mapFn) {\n      return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n    }\n  }], [{\n    key: \"invalid\",\n    value: function invalid(reason) {\n      var explanation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!reason) {\n        throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n      }\n      var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n      if (Settings.throwOnInvalid) {\n        throw new InvalidIntervalError(invalid);\n      } else {\n        return new Interval({\n          invalid: invalid\n        });\n      }\n    }\n\n    /**\n     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n     * @param {DateTime|Date|Object} start\n     * @param {DateTime|Date|Object} end\n     * @return {Interval}\n     */\n  }, {\n    key: \"fromDateTimes\",\n    value: function fromDateTimes(start, end) {\n      var builtStart = friendlyDateTime(start),\n        builtEnd = friendlyDateTime(end);\n      var validateError = validateStartEnd(builtStart, builtEnd);\n      if (validateError == null) {\n        return new Interval({\n          start: builtStart,\n          end: builtEnd\n        });\n      } else {\n        return validateError;\n      }\n    }\n\n    /**\n     * Create an Interval from a start DateTime and a Duration to extend to.\n     * @param {DateTime|Date|Object} start\n     * @param {Duration|Object|number} duration - the length of the Interval.\n     * @return {Interval}\n     */\n  }, {\n    key: \"after\",\n    value: function after(start, duration) {\n      var dur = Duration.fromDurationLike(duration),\n        dt = friendlyDateTime(start);\n      return Interval.fromDateTimes(dt, dt.plus(dur));\n    }\n\n    /**\n     * Create an Interval from an end DateTime and a Duration to extend backwards to.\n     * @param {DateTime|Date|Object} end\n     * @param {Duration|Object|number} duration - the length of the Interval.\n     * @return {Interval}\n     */\n  }, {\n    key: \"before\",\n    value: function before(end, duration) {\n      var dur = Duration.fromDurationLike(duration),\n        dt = friendlyDateTime(end);\n      return Interval.fromDateTimes(dt.minus(dur), dt);\n    }\n\n    /**\n     * Create an Interval from an ISO 8601 string.\n     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n     * @param {string} text - the ISO string to parse\n     * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     * @return {Interval}\n     */\n  }, {\n    key: \"fromISO\",\n    value: function fromISO(text, opts) {\n      var _split = (text || \"\").split(\"/\", 2),\n        _split2 = _slicedToArray(_split, 2),\n        s = _split2[0],\n        e = _split2[1];\n      if (s && e) {\n        var start, startIsValid;\n        try {\n          start = DateTime.fromISO(s, opts);\n          startIsValid = start.isValid;\n        } catch (e) {\n          startIsValid = false;\n        }\n        var end, endIsValid;\n        try {\n          end = DateTime.fromISO(e, opts);\n          endIsValid = end.isValid;\n        } catch (e) {\n          endIsValid = false;\n        }\n        if (startIsValid && endIsValid) {\n          return Interval.fromDateTimes(start, end);\n        }\n        if (startIsValid) {\n          var dur = Duration.fromISO(e, opts);\n          if (dur.isValid) {\n            return Interval.after(start, dur);\n          }\n        } else if (endIsValid) {\n          var _dur = Duration.fromISO(s, opts);\n          if (_dur.isValid) {\n            return Interval.before(end, _dur);\n          }\n        }\n      }\n      return Interval.invalid(\"unparsable\", \"the input \\\"\".concat(text, \"\\\" can't be parsed as ISO 8601\"));\n    }\n\n    /**\n     * Check if an object is an Interval. Works across context boundaries\n     * @param {object} o\n     * @return {boolean}\n     */\n  }, {\n    key: \"isInterval\",\n    value: function isInterval(o) {\n      return o && o.isLuxonInterval || false;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(intervals) {\n      var _intervals$sort$reduc = intervals.sort(function (a, b) {\n          return a.s - b.s;\n        }).reduce(function (_ref3, item) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            sofar = _ref4[0],\n            current = _ref4[1];\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        }, [[], null]),\n        _intervals$sort$reduc2 = _slicedToArray(_intervals$sort$reduc, 2),\n        found = _intervals$sort$reduc2[0],\n        final = _intervals$sort$reduc2[1];\n      if (final) {\n        found.push(final);\n      }\n      return found;\n    }\n\n    /**\n     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n     * @param {Array} intervals\n     * @return {Array}\n     */\n  }, {\n    key: \"xor\",\n    value: function xor(intervals) {\n      var _Array$prototype;\n      var start = null,\n        currentCount = 0;\n      var results = [],\n        ends = intervals.map(function (i) {\n          return [{\n            time: i.s,\n            type: \"s\"\n          }, {\n            time: i.e,\n            type: \"e\"\n          }];\n        }),\n        flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(ends)),\n        arr = flattened.sort(function (a, b) {\n          return a.time - b.time;\n        });\n      var _iterator = _createForOfIteratorHelper(arr),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n          currentCount += i.type === \"s\" ? 1 : -1;\n          if (currentCount === 1) {\n            start = i.time;\n          } else {\n            if (start && +start !== +i.time) {\n              results.push(Interval.fromDateTimes(start, i.time));\n            }\n            start = null;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return Interval.merge(results);\n    }\n  }]);\n  return Interval;\n}();\nexport { Interval as default };","map":{"version":3,"names":["DateTime","friendlyDateTime","Duration","Settings","InvalidArgumentError","InvalidIntervalError","Invalid","Formatter","Formats","INVALID","validateStartEnd","start","end","isValid","Interval","invalid","concat","toISO","config","_classCallCheck","s","e","isLuxonInterval","_createClass","key","get","invalidReason","reason","explanation","value","length","unit","arguments","undefined","toDuration","apply","NaN","count","startOf","Math","floor","diff","valueOf","hasSame","isEmpty","minus","isAfter","dateTime","isBefore","contains","set","_ref","fromDateTimes","splitAt","_this","_len","dateTimes","Array","_key","sorted","map","filter","d","sort","results","i","added","next","push","splitBy","duration","dur","fromDurationLike","as","idx","plus","mapUnits","x","divideEqually","numberOfParts","slice","overlaps","other","abutsStart","abutsEnd","engulfs","equals","intersection","union","difference","_this2","_len2","intervals","_key2","xor","toString","toLocaleString","formatOpts","DATE_SHORT","opts","create","loc","clone","formatInterval","toISODate","toISOTime","toFormat","dateFormat","_ref2","_ref2$separator","separator","mapEndpoints","mapFn","throwOnInvalid","builtStart","builtEnd","validateError","after","dt","before","fromISO","text","_split","split","_split2","_slicedToArray","startIsValid","endIsValid","isInterval","o","merge","_intervals$sort$reduc","a","b","reduce","_ref3","item","_ref4","sofar","current","_intervals$sort$reduc2","found","final","_Array$prototype","currentCount","ends","time","type","flattened","prototype","_toConsumableArray","arr","_iterator","_createForOfIteratorHelper","_step","n","done","err","f","default"],"sources":["C:/A new folder/codes/weatherapp/node_modules/luxon/src/interval.js"],"sourcesContent":["import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns a localized string representing this Interval. Accepts the same options as the\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n   * is browser-specific, but in general it will return an appropriate representation of the\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n   * specified.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n   * Intl.DateTimeFormat constructor options.\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n   * formatting tool.\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\n   * See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - Options.\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n   * representations.\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}